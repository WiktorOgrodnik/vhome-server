//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "vuser")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub login: String,
    pub passwd: String,
    pub created_at: DateTimeWithTimeZone,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub picutre: Option<Vec<u8>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::task_assign::Entity")]
    TaskAssign,
    #[sea_orm(has_many = "super::tokens::Entity")]
    Tokens,
    #[sea_orm(has_many = "super::user_groups::Entity")]
    UserGroups,
}

impl Related<super::task_assign::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TaskAssign.def()
    }
}

impl Related<super::tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tokens.def()
    }
}

impl Related<super::user_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserGroups.def()
    }
}

impl Related<super::task::Entity> for Entity {
    fn to() -> RelationDef {
        super::task_assign::Relation::Task.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::task_assign::Relation::Vuser.def().rev())
    }
}

impl Related<super::vgroup::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_groups::Relation::Vgroup.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_groups::Relation::Vuser.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
